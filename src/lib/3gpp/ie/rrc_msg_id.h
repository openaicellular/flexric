#ifndef RRC_MSG_ID_E2SM_H
#define RRC_MSG_ID_E2SM_H

#include <stdbool.h>
#include <stdlib.h>
#include <stdint.h>

typedef enum{
  LTE_RRC_MESSAGE_ID,
  NR_RRC_MESSAGE_ID,

  END_RRC_MESSAGE_ID,
} rrc_message_id_e;

typedef enum{
  BCCH_BCH_LTE_RRC_CLASS, 
  BCCH_BCH_MBMS_LTE_RRC_CLASS,
  BCCH_DL_SCH_LTE_RRC_CLASS,
  BCCH_DL_SCH_BR_LTE_RRC_CLASS, 
  BCCH_DL_SCH_MBMS_LTE_RRC_CLASS, 
  MCCH_LTE_RRC_CLASS,

  PCCH_LTE_RRC_CLASS,
  DL_CCCH_LTE_RRC_CLASS,
  DL_DCCH_LTE_RRC_CLASS, 
  UL_CCCH_LTE_RRC_CLASS, 
  UL_DCCH_LTE_RRC_CLASS, 
  SC_MCCH_LTE_RRC_CLASS, 

  END_LTE_RRC_CLASS

} lte_rrc_class_e;

// NR RRC Message Classes
typedef enum{
  BCCH_BCH_NR_RRC_CLASS, 
  BCCH_DL_SCH_NR_RRC_CLASS, 
  DL_CCCH_NR_RRC_CLASS, 
  DL_DCCH_NR_RRC_CLASS, 
  PCCH_NR_RRC_CLASS,
  UL_CCCH_NR_RRC_CLASS,
  UL_CCCH1_NR_RRC_CLASS,
  UL_DCCH_NR_RRC_CLASS,

  END_NR_RRC_CLASS

} nr_rrc_class_e; 

// NR RRC Message IDs
typedef enum{
  MIB_BCCH_BCH_RRC_MSG_ID,

  END_BCCH_BCH_RRC_MSG_ID

} bcch_bch_rrc_msg_id_e;

typedef enum{
  SYSTEM_INFORMATION_BCCH_DL_SCH_RRC_MSG_ID,
  SYSTEM_INFORMATION_BLOCK_TYPE_1_BCCH_DL_SCH_RRC_MSG_ID,

  END_BCCH_DL_SCH_RRC_MSG_ID

} bcch_dl_sch_rrc_msg_id_e;

typedef enum{
  RRC_REJECT_DL_CCCH_RRC_MSG_ID,
  RRC_SETUP_DL_CCCH_RRC_MSG_ID,

  END_DL_CCCH_RRC_MSG_ID

} dl_ccch_rrc_msg_id_e;

typedef enum{
  RRC_RECONFIGURATION_DL_DCCH_RRC_MSG_ID,
  RRC_RESUME_DL_DCCH_RRC_MSG_ID,
  RRC_RELEASE_DL_DCCH_RRC_MSG_ID,
  RRC_REESTABLISHMENT_DL_DCCH_RRC_MSG_ID,
  SECURITY_MODE_COMMAND_DL_DCCH_RRC_MSG_ID,
  DL_INFORMATION_TRANSFER_DL_DCCH_RRC_MSG_ID,
  UE_CAPABILITY_ENQUIRY_DL_DCCH_RRC_MSG_ID,
  COUNTER_CHECK_DL_DCCH_RRC_MSG_ID,
  MOBILITY_FROM_NR_COMMAND_DL_DCCH_RRC_MSG_ID,
  DL_DEDICATED_MESSAGE_SEGMENT_R16_DL_DCCH_RRC_MSG_ID,
  UE_INFORMATION_REQUEST_R16_DL_DCCH_RRC_MSG_ID,
  DL_INFORMATION_TRANSFER_MRDC_R16_DL_DCCH_RRC_MSG_ID,
  LOGGED_MEASUREMENT_CONFIGURATION_R16_DL_DCCH_RRC_MSG_ID,

  END_DL_DCCH_RRC_MSG_ID

} dl_dcch_rrc_msg_id_e;

typedef enum{
  PAGING_PCCH_RRC_MSG_ID,

  END_PCCH_RRC_MSG_ID

} pcch_rrc_msg_id_e;

typedef enum{
  RRC_SETUP_REQUEST_UL_CCCH_RRC_MSG_ID,
  RRC_RESUME_REQUEST_UL_CCCH_RRC_MSG_ID,
  RRC_REESTABLISHMENT_REQUEST_UL_CCCH_RRC_MSG_ID,
  RRC_SYSTEM_INFO_REQUEST_UL_CCCH_RRC_MSG_ID,

  END_UL_CCCH_RRC_MSG_ID

} ul_ccch_rrc_msg_id_e;

typedef enum{
  RRC_RESUME_REQUEST_1_UL_CCCH1_RRC_MSG_ID,

  END_UL_CCCH1_RRC_MSG_ID

} ul_ccch1_rrc_msg_id_e;

typedef enum{
  MEASUREMENT_REPORT_UL_DCCH_RRC_MSG_ID,
  RRC_RECONFIGURATION_COMPLETE_UL_DCCH_RRC_MSG_ID,
  RRC_SETUP_COMPLETE_UL_DCCH_RRC_MSG_ID,
  RRC_REESTABLISHMENT_COMPLETE_UL_DCCH_RRC_MSG_ID,
  RRC_RESUME_COMPLETE_UL_DCCH_RRC_MSG_ID,
  SECURITY_MODE_COMPLETE_REPORT_UL_DCCH_RRC_MSG_ID,
  SECURITY_MODE_FAILURE_UL_DCCH_RRC_MSG_ID,
  UL_INFORMATION_TRANSFER_UL_DCCH_RRC_MSG_ID,
  LOCATION_MEASUREMENT_INDICATION_UL_DCCH_RRC_MSG_ID,
  UE_CAPABILITY_INFORMATION_UL_DCCH_RRC_MSG_ID,
  COUNTER_CHECK_RESPONSE_UL_DCCH_RRC_MSG_ID,
  UE_ASSISTANCE_INFORMATION_UL_DCCH_RRC_MSG_ID,
  FAILURE_INFORMATION_UL_DCCH_RRC_MSG_ID,
  UL_INFORMATION_TRANSFER_MRDC_UL_DCCH_RRC_MSG_ID,
  SCG_FAILURE_INFORMATION_UL_DCCH_RRC_MSG_ID,
  SCG_FAILURE_INFORMATION_EUTRA_UL_DCCH_RRC_MSG_ID,

  END_UL_DCCH_RRC_MSG_ID

} ul_dcch_rrc_msg_id_e; 



// 6.2.2.13 E2 SM
// 9.3.35 E2 RC

typedef struct{
  // Mandatory
  rrc_message_id_e type;
  union{
    lte_rrc_class_e lte;
    nr_rrc_class_e nr;
  };

  // Mandatory
  // Integer
  // Number starts from 0 from the first
  // entry of a given RRC message class
  // defined in TS 36.331 [14] or TS
  // 38.331 [15].
  // My interpretation is that they start
  // from BCCH-BCH-Message, DL-CCCH-Message
  uint64_t rrc_msg_id;

} rrc_msg_id_t;

void free_rrc_msg_id( rrc_msg_id_t* src);

bool eq_rrc_msg_id(rrc_msg_id_t const* m0, rrc_msg_id_t const* m1);

rrc_msg_id_t cp_rrc_msg_id(rrc_msg_id_t const* src);

#endif

